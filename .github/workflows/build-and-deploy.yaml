name: Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  REGISTRY: docker.io

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION=latest
        else
          VERSION=${GITHUB_SHA::7}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.DOCKER_USERNAME }}/fastapi-todo-api:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.DOCKER_USERNAME }}/fastapi-todo-frontend:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: http://localhost # This should be updated with your actual URL

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Setup Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        # Write the kubeconfig to a temporary file first
        echo "${{ secrets.KUBE_CONFIG }}" > /tmp/kube_config_b64
        # Clean any potential corrupted characters
        tr -cd '[:base64:]\n' < /tmp/kube_config_b64 > /tmp/kube_config_b64_clean
        # Decode and write to the final location
        base64 -d /tmp/kube_config_b64_clean > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        # Clean up
        rm -f /tmp/kube_config_b64 /tmp/kube_config_b64_clean
        # Debug: Show cluster info (without sensitive data)
        echo "Testing connection to cluster..."
        kubectl cluster-info

    - name: Ensure namespace exists
      run: |
        echo "Creating namespace if it doesn't exist..."
        cat << EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: fastapi-todo-dev
        EOF

    - name: Generate Kubernetes configurations
      run: |
        DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} \
        VERSION=${{ needs.build.outputs.version }} \
        ENVIRONMENT=dev \
        ./scripts/generate-k8s-configs.sh

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/generated-dev.yaml
        kubectl rollout status deployment/api -n fastapi-todo-dev
        kubectl rollout status deployment/frontend -n fastapi-todo-dev

    - name: Verify deployment
      run: |
        kubectl get all -n fastapi-todo-dev
        echo "Deployment completed successfully!" 